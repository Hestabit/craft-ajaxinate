{#
/**
 * Entries Loader And Filter plugin for Craft CMS 3.x
 *
 * Entries Loader And Filter Settings.twig
 *
 * @author    Hestabit Technologies <technology@hestabit.com>
 * @copyright Copyright (c) 2019 Hestabit Technologies
 * @link      https://hestabit.com
 * @package   CraftAjaxinate
 * @since     1.0.0
 */
#}

{% import "_includes/forms" as forms %}

{% do view.registerAssetBundle("hestabit\\craftajaxinate\\assetbundles\\indexcpsection\\IndexCPSectionAsset") %}

{# Section List #}
{{ forms.multiselectField({
        label:        "Select Section",
        id:           "sectionsSelected",
        required:     true,
        options:      sections,
        name: 'sectionsSelected',
        values: settings['sectionsSelected']
})
}}

<hr>

{{ forms.lightswitchField({
    label: 'Load entries on page load.',
    name: 'showInitEntries',
    id: 'showInitEntries',
    on: settings['showInitEntries'],
}) }}

<div class="js_showInitEntries" style="display: none; color: #8f98a3;">
    <p>Offset will be used to load entries.Adjust as per your need.</p>
</div>

{{ forms.textField({
    label: 'Offset',
    instructions: 'Enter the number of entries already loaded.Same number of entries will be loaded on page load if active.',
    id: 'offsetEntries',
    name: 'offsetEntries',
    value: '',
    max: 9999,
    size: 1,
    min: 0,
    type: 'number',
    value: settings['offsetEntries']
})
}}

<hr>

{{ forms.textField({
    label: 'Limit',
    instructions: 'Enter the number of entries to load.',
    id: 'limitEntries',
    name: 'limitEntries',
    value: '',
    min: 1,
    max: 9999,
    size: 1,
    type: 'number',
    value: settings['limitEntries']
})
}}

<hr>
{{ forms.lightswitchField({
    label: 'Show future entries only.',
    name: 'showFutureEntries',
    id: 'showFutureEntries',
    on: settings['showFutureEntries'],
}) }}

<div class="js_showFutureEntries" style="display: none;">
    {{ forms.selectField({
        label: 'Filter fileds.',
        instructions: 'Select the date field.',
        name: 'dateFieldSelected',
        id: 'dateFieldSelected',
        required: false,
        options: fields,
        value: settings['dateFieldSelected']
    }) }}
</div>
<hr>
    {% set siteRows = [] %}

    {% for site in craft.app.sites.getAllSites() %}
        {% set template = settings['outputTemplate'] %}
        {% set currentSite = craft.app.sites.currentSite.handle %} 
       
        {% if template is not empty %}
          {% set template = settings['outputTemplate'][currentSite]['template']  %}
        {% endif %}
    
        {% set siteRows = siteRows|merge({
            (site.handle): {
                heading: site.name|t('site'),
                template: {
                    value: template,
                },
            }
        }) %}
    {% endfor %}


    {{ forms.editableTableField({
        label: "Entries Template"|t('app'),
        instructions: "Choose template on which you want the result."|t('app'),
        id: 'outputTemplate',
        name: 'outputTemplate',
        cols: {
            heading: {
                type: 'heading',
                heading: "Site"|t('app'),
                class: 'thin'
            },
            template: {
                type: 'template',
                heading: "Template"|t('app'),
                info: "Entries object {{ entries }} will be available on this template."|t('app'),
                code: true
            },
        },
        rows: siteRows,
        staticRows: true,
    }) }}

<hr/>

{{ forms.lightswitchField({
    label: 'Activate extra filter.',
    name: 'extraFieldState',
    id: 'extraFieldState',
    on: settings['extraFieldState'],
}) }}

<div class="js_extraFieldState" style="display: none;">
    {{ forms.multiselectField({
        label: 'Filter fileds.',
        instructions: 'Select all the fields for filters.',
        name: 'extraFieldSelected',
        id: 'extraFieldSelected',
        required: false,
        options: fields,
        values: settings['extraFieldSelected']
    }) }}
</div>

<hr>
{{ forms.lightswitchField({
    label: 'Activate reset button.',
    name: 'resetBtnState',
    id: 'resetBtnState',
    on: settings['resetBtnState'],
}) }}

{{ forms.textField({
    label: 'Message',
    instructions: 'Message to show when no data is found.',
    id: 'noMoreData',
    name: 'noMoreData',
    type: 'text',
    value: settings['noMoreData']
})
}}
<hr>
<div>Scroll Events default settings</div>

{{ forms.lightswitchField({
    label: 'Load entries on scroll.',
    name: 'scrollActive',
    id: 'scrollActive',
    on: settings['scrollActive'],
}) }}

<div class="js_scrollActiveState" style="display: none;">
    {{ forms.textField({
        label: 'Entries to load',
        instructions: 'Number of pages to load on each scroll event.( On each scroll we trigger load more functionality.) ',
        id: 'pagesToLoad',
        name: 'pagesToLoad',
        value: '',
        max: 9999,
        size: 1,
        min: 1,
        type: 'number',
        value: settings['pagesToLoad']
    })
    }}

    {{ forms.textField({
        label: 'Offset from bottom',
        instructions: 'Ajax will be triggered when user scrolled to this zone in bottom.',
        id: 'bottomOffset',
        name: 'bottomOffset',
        value: '',
        max: 9999,
        size: 1,
        min: 1,
        type: 'number',
        value: settings['bottomOffset']
    })
    }}

</div>

{% js on load %}
    

    $( "#settings-extraFieldState" ).on('change', function( event ) {
        toggleSorting('#settings-extraFieldState', '.js_extraFieldState');
    });

    $( "#settings-showFutureEntries" ).on('change', function( event ) {
        toggleSorting('#settings-showFutureEntries', '.js_showFutureEntries');
    });

    $( "#settings-showInitEntries" ).on('change', function( event ) {
        toggleSorting('#settings-showInitEntries', '.js_showInitEntries');
    });

    $( "#settings-scrollActive" ).on('change', function( event ) {
        toggleSorting('#settings-scrollActive', '.js_scrollActiveState');
    });

    function toggleSorting(swithcId, targetDiv) {
       var filterState = $(swithcId).attr('aria-checked'); 
        if(filterState == 'true') {
            $(targetDiv).show();
            return true;
        }

        $(targetDiv).hide();
    }

    {# on load #}
    toggleSorting('#settings-extraFieldState', '.js_extraFieldState');
    toggleSorting('#settings-showFutureEntries', '.js_showFutureEntries');
    toggleSorting('#settings-showInitEntries', '.js_showInitEntries');
    toggleSorting('#settings-scrollActive', '.js_scrollActiveState');


{% endjs %}
